---+ Heppy : a mini framework for HEP event processing in python


%TOC{title="Contents:"}%

---++ Prerequisites

*You must follow FccSoftwareEDM first*.

*You should be familiar with python to follow this tutorial*. 

I strongly advise to carefully follow [[http://docs.python.org/tutorial/index.html][the python tutorial]] if not yet done. It will take you a few hours now, but will gain you many days in the future. 

Why python? In short: 
   * fast learning curve: python is the most easy-to-learn language
   * high productivity: coding in python is about 10 times faster than in C++
   * high flexibility: code can be easily reused, refactored, extended. 
   * dynamic typing (similar to C++ template features, without the pain in the neck): if you do an analysis for e.g. the muon channel, it is going to work for the electron channel with only minor modifications related to lepton identification. If your analysis reads a certain kind of particle-like objects, it will probably work on other kinds of particle-like objects. 
   * very large and easy-to-use standard library

---++ A short description of the analysis system

---+++ The ntuplizer

This goal of the ntuplizer system is to produce a flat tree for each of the datasets (also called "components") used in the analysis. 
Any operation requiring a user-written loop on the events can be done while producing the flat tree, so that the resulting trees can be used with simple TTree.Draw or TTree.Project commands. 

For example, the ntuplizer makes it possible to: 
   * read events from an albers root file produced using the FCC software framework.  
   * create python physics objects to hold the C++ objects from the albers root file. These objects have the exact same interface as the C++ objects, and can be extended with more information. For example, you could write your own muon ID function for your python Muon object, or add attributes to your python Muons along the processing flow, like the 4-momentum of the closest jet or the closest generated muon. 
   * create new python objects, e.g. a Z object containing two leptons.
   * compute event-by-event weights
   * select a trigger path, and match to the corresponding trigger objects
   * define and write simple flat trees 
It is up to you to define what you want to do, possibly re-using existing code from other analyses or writing your own. 

An analysis typically consists in several tenth of samples, or "components": data samples, standard model backgrounds, signal. The ntuplizer is built in such a way that it takes one command to either: 
   * run interactively on a single component
   * run several processes in parallel on your multiprocessor machine
   * run hundreds of processes as separate jobs on LSF, the CERN batch cluster. 

If you decide to run several processes, you can split a single component in as many chunks as input ROOT files for this component. For example, you could run in parallel:
   * 6 chunks from the DYJet component, using 6 processors of your local machine, assuming you have more than 6 input DYJet ROOT files. 
   * 200 chunks from the DYJet component, 300 from your 5 data components altogether, and 300 jobs from all the remaing components (e.g. di-boson, TTJets, ...) on LSF. 

The ntuplizer is based on python, pyroot, and the albers event data model (EDM). It could have been written as a simple python macro based on ROOT and albers.
Instead, it was decided to keep the design of typical high-energy physics software frameworks (e.g. CMSSW, Athena, FCCSW), and to implement it in python. This design boils down to:
   * a python configuration system, similar to the one we use in HEP full frameworks like Gaudi. 
   * a Looper accessing the albers EDM events and running a sequence of analyzers on each event. 
   * a common python event, created at the beginning of the processing of each albers EDM event, and read/modified by the analyzers.
the python event allows you to build the information you want into your event, and allows the analyzers to communicate. At the end of the processing of a given EDM event, the python event can be filled into a flat tree using a specific kind of analyzer [[https://github.com/HEP-FCC/heppy/blob/master/analyzers/SimpleTreeProducer.py][like this one]]. 

*The code consists of two packages:*

[[https://github.com/HEP-FCC/heppy/tree/master][The core package]] contains the following packages:
   * [[https://github.com/HEP-FCC/heppy/tree/master/framework][framework]] : Core modules: python configuration system, the looper, the python event, etc.
   * [[https://github.com/HEP-FCC/heppy/tree/master/analyzers][analyzers]] : Generic analyzers
   * [[https://github.com/HEP-FCC/heppy/tree/master/statistics][statistics]] : Modules for counting and averaging, histogramming, tree production.
   * [[https://github.com/HEP-FCC/heppy/tree/master/utils][utils]] : Miscellaneous utilities, like deltaR matching tools.
It also contains a [[https://github.com/HEP-FCC/heppy/tree/master/scripts][scripts]] directory.

[[https://github.com/HEP-FCC/heppy_fcc/tree/master][The FCC-specific package]] contains the following packages:
   * [[https://github.com/HEP-FCC/heppy_fcc/tree/master/analyzers][analyzers]] : FCC-specific analyzers;
   * [[https://github.com/HEP-FCC/heppy_fcc/tree/master/particles][particles]] : python physics objects;
   * [[https://github.com/HEP-FCC/heppy_fcc/tree/master/fastsim][fastsim]] : PAPAS fast simulation;
   * [[https://github.com/HEP-FCC/heppy_fcc/tree/master/fastsim][display]] : event display;
   * [[https://github.com/HEP-FCC/heppy_fcc/tree/master/tools][tools]] : various tools, like generated particle history analysis.

The code is documented. To get more information on a given class, use the python docstring functionality, for example:
<verbatim>
python
from heppy.framework.looper import Looper
help(Looper)
</verbatim>
Note: the Looper is used in [[https://github.com/HEP-FCC/heppy/blob/master/scripts/heppy_loop.py][heppy_loop.py]] (no need to understand this code :-) ).

---++ Installation

We assume that you have followed FccSoftwareEDM, which means that you should have a base directory =$FCC= containing the following packages:
   * albers-core
   * fcc-edm
   * analysis-cpp
For this tutorial, these three packages are all needed.

First, make sure the =FCC= environment variable is set properly. Do:
<pre>
echo $FCC
</pre>
If the command returns the path to the directory containing the 3 packages described above, you're all set.
Otherwise, go to this directory and do:
<pre>
export FCC=$PWD
</pre>

We will now install the two heppy packages and a pythia inferface to the FCC EDM:
   * [[https://github.com/HEP-FCC/heppy/tree/master][heppy]]
   * [[https://github.com/HEP-FCC/heppy_fcc/tree/master][heppy_fcc]]
   * [[https://github.com/HEP-FCC/pythiafcc/tree/master][pythiafcc]]

   
Go back to your base directory and install the core heppy package:
<pre>
cd $FCC
git clone git@github.com:HEP-FCC/heppy.git
cd heppy
</pre>
Follow the instructions in the README.md file.

Go back to your base directory and install the specific heppy_fcc package:
<pre>
cd $FCC
git clone git@github.com:HEP-FCC/heppy_fcc.git
cd heppy_fcc
</pre>
Follow the installation instructions in the README.md file, *but do not try to run yet*. 

Go back to your base directory and install the pythiafcc package:
<pre>
cd $FCC
git clone git@github.com:HEP-FCC/pythiafcc.git
cd pythiafcc
</pre>
Follow the installation instructions in the README.md file.


---++ Generating an EDM root file with pythia

[[https://github.com/HEP-FCC/pythiafcc/tree/master][pythiafcc]] is a pythia8 executable that writes all generated particles and vertices to an FCC EDM root file.

It is currently set to produce inclusive gamma star/Z events at the Z pole. 
Later on you can modify the pythia8 cards in [[https://github.com/HEP-FCC/pythiafcc/blob/master/example/generate.cc][generate.cc]] and recompile if you want a different kind of events.

For now, just do: 

<pre>
cd $HEPPY_FCC/test
pythiafcc-generate
</pre>

You should get a file called =example.root= that are going to read in the following exercises.


---++ Exercises

---+++ 1- Understanding the configuration file

Have a detailed look at the configuration file, [[https://github.com/HEP-FCC/heppy_fcc/blob/master/test/simple_analysis_cfg.py][simple_analysis_cfg.py]]. 

Load it in python: 
<verbatim>
ipython -i simple_analysis_cfg.py
</verbatim>

Print the component:

<pre>
print selectedComponents[0]

->
Component: example
        dataset_entries:   0
        files          :   ['example.root']
        isData         :   False
        isEmbed        :   False
        isMC           :   False
        tree_name      :   None
        triggers       :   None
</pre>

Print the sequence of analyzers:

<pre>
print sequence

->
0 :
Analyzer: heppy_fcc.analyzers.FCCReader.FCCReader_1
        class_object   :   <class 'heppy_fcc.analyzers.FCCReader.FCCReader'>
        instance_label :   1
        verbose        :   False :
1 :
Analyzer: heppy_fcc.analyzers.Recoil.Recoil_gen
        class_object   :   <class 'heppy_fcc.analyzers.Recoil.Recoil'>
        instance_label :   gen
        particles      :   gen_particles_stable
        sqrts          :   350.0
        verbose        :   False :
2 :
Analyzer: heppy_fcc.analyzers.JetClusterizer.JetClusterizer_gen
        class_object   :   <class 'heppy_fcc.analyzers.JetClusterizer.JetClusterizer'>
        instance_label :   gen
        particles      :   gen_particles_stable
        verbose        :   False :
3 :
Analyzer: heppy_fcc.analyzers.SimpleTreeProducer.SimpleTreeProducer_1
        class_object   :   <class 'heppy_fcc.analyzers.SimpleTreeProducer.SimpleTreeProducer'>
        instance_label :   1
        verbose        :   False :
</pre>


%T% all objects created in this cfg file are just configuration objects. These configuration objects will be passed to the actual analyzers that contain your analysis code. 

%T% In the future, when you use this event processing system in your analysis, always make sure that all ingredients (components, analyzers) are defined correctly by loading your configuration in python before even trying to run.

---+++ 2- Finding existing analysis code

Open [[https://github.com/HEP-FCC/heppy_fcc/blob/master/test/simple_analysis_cfg.py][simple_analysis_cfg.py]]. 

The configuration fragments for the analyzers look like: 
<pre>
from heppy_fcc.analyzers.Recoil import Recoil
gen_recoil = cfg.Analyzer(
    Recoil,
    instance_label = 'gen',
    sqrts = 350.,
    particles = 'gen_particles_stable'
)
</pre>

The first argument is a class object coming from [[https://github.com/HEP-FCC/heppy_fcc/blob/master/analyzers/Recoil.py][Recoil.py]]. The framework will use this class object to create an instance of this class. 

The second argument, =instance_label=, is an instance label. This argument is optional, and is useful in case several analyzers of the same class are requested.

Have a look at the [[https://github.com/HEP-FCC/heppy_fcc/blob/master/analyzers/Recoil.py][Recoil.py]] module, and study the code. In particular, note how the analyzer reads from the event and writes to it, and how it makes use of the parameters defined in its configuration fragment.

Then study the code of the base class in [[https://github.com/HEP-FCC/heppy/blob/master/framework/analyzer.py][analyzer.py]].

---+++ 3- Running interactively on one component

Run:  
<pre>
heppy_loop.py Out simple_analysis_cfg.py -N 1000
</pre>

You should see a healhy printout with at the end:  
<pre>
number of events processed: 1000
</pre>

In the ouput =Out= directory, you can find a component directory, =example=.
Investigate the contents of this component directory, and of all directories within.
Have a look at the text files, but ignore the =.pck= files

Fire up root (here we choose to use ipython + pyroot), and check the main output tree: 

<verbatim>
ipython 
from ROOT import TFile
f = TFile('Out/example/heppy_fcc.analyzers.SimpleTreeProducer.SimpleTreeProducer_1/tree.root')
f.ls()
t = f.Get('events')
t.Print()
t.Draw('recoil_visible_gen_m')
</verbatim>

---+++ 4- Multiprocessing on a single machine

Copy your input file: 
<pre>
cp example.root example_2.root
</pre>

Edit [[https://github.com/HEP-FCC/heppy_fcc/blob/master/test/simple_analysis_cfg.py][simple_analysis_cfg.py]]
and add the following lines, after the creation of the =comp= component object, 
and before the creation of the config object.  
<pre>
comp.files.append('example_2.root')
comp.splitFactor = 2  # splitting the component in 2 chunks 
</pre>

As usual, load the configutation script in python, 
and print the =config= object. You should be able to see that the component now has two input files and a splitFactor equal to 2. 

Run again: 
<verbatim>
heppy_loop.py Multi simple_analysis_cfg.py -N 1000
</verbatim>

In the =Multi= output directory, you have chunks. 
Each of these chunks correspond to one of the threads you have run 
We're going to add everything up: 
<verbatim>
cd Multi
heppy_check.py * 
heppy_hadd.py .
</verbatim>

The first command checks that all chunks terminated correctly. 
The second command adds the root files (with hadd), the cut-flow counters, and the averages. 

%T% To do multiprocessing, you can also define several components corresponding to the samples you need to process. Each of these components can have its own split factor. 

%T% Check the number of processors on your machine (=cat /proc/cpuinfo=), and define the number of threads accordingly. 

%T% When debugging your code, make sure to have only one thread. 


-- Main.ColinBernet - 08 Oct 2014
